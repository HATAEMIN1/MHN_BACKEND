name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: gradlew 파일에 실행 권한 추가
        run: chmod +x ./gradlew

      - name: 테스트 없이 빌드하기
        run: ./gradlew clean build -x test

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t mhnapiserver .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag mhnapiserver ${{ steps.login-ecr.outputs.registry }}/mhnapiserver:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/mhnapiserver:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "===== Debugging Information ====="
            echo "1. AWS CLI Version:"
            aws --version
            
            echo "2. Docker Version:"
            docker --version
            
            echo "3. Current AWS Identity:"
            aws sts get-caller-identity
            
            echo "4. ECR Login Attempt:"
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }} || echo "ECR Login Failed"
            
            echo "5. Docker Images:"
            docker images
            
            echo "6. Attempting to pull the image:"
            docker pull ${{ steps.login-ecr.outputs.registry }}/mhnapiserver:latest || echo "Docker Pull Failed"
            
            echo "7. Stopping and removing existing container:"
            docker stop mhnapiserver || echo "No container to stop"
            docker rm mhnapiserver || echo "No container to remove"
            
            echo "8. Running new container:"
            docker run -d --name mhnapiserver -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/mhnapiserver:latest || echo "Docker Run Failed"
            
            echo "9. Docker PS:"
            docker ps -a
            
            echo "===== End of Debugging Information ====="
            

#            docker stop mhnapiserver || true
#            docker rm mhnapiserver || true
#            docker pull ${{ steps.login-ecr.outputs.registry }}/mhnapiserver:latest
#            docker run -d --name mhnapiserver -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/mhnapiserver:latest
# ##########